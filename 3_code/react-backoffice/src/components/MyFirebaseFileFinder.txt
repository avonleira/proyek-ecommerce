import React, { useState, useEffect, Fragment } from "react";
import { Box, Button, Card, CardActionArea, CardMedia, CircularProgress, Dialog, DialogContent, DialogTitle, Grid, IconButton, Stack, Tab, Tabs, TextField, TextFieldProps, Typography, useMediaQuery, useTheme } from "@mui/material";

import CloseIcon from '@mui/icons-material/Close';
import CloudUploadOutlinedIcon from '@mui/icons-material/CloudUploadOutlined';
import DeleteIcon from '@mui/icons-material/Delete';

import MyTabPanel from "./MyTabPanel";
import FStrMedia, { IFStrMListAllResultItem } from "../backend/Classes/FirebaseStorageMedia";
import { LoadingButton } from "@mui/lab";
import MyConfirmDialog from "./MyConfirmDialog";

interface IMyFirebaseFileFinderProps {
  storagePath?: string
  aspectRatio?: string
  open: boolean
  onClose?: () => void
  // setOpenDialog: () => void
  // setFinalLink: React.Dispatch<React.SetStateAction<string|null>>
  onLinkChange: (newValue: string|null) => void
}

export default function MyFirebaseFileFinder(props: IMyFirebaseFileFinderProps) {
  const { storagePath = "uploads", aspectRatio = "16/12" } = props;
  const { open, onClose, onLinkChange } = props;
  const theme = useTheme();
  const upMd = useMediaQuery(theme.breakpoints.up('md'));
  // const [openDialog, setOpenDialog] = useState<boolean>(true)
  const [activeMenu, setActiveMenu] = useState<number>(0);
  const [finalLink, setFinalLink] = useState<string|null>(null)

  useEffect(() => {
    // console.log("Final Link Changed", finalLink)
    onLinkChange(finalLink)
  }, [finalLink])

  return (
    <Dialog
      open={open} fullWidth maxWidth="md" fullScreen={!upMd} keepMounted={false}
      onClose={onClose}
      aria-describedby="file-finder-dialog"
    >
      <DialogTitle>
        {"Masukkan Gambar"}
        <IconButton
          aria-label="close" onClick={onClose}
          sx={{
            position: 'absolute', right: 8, top: 8,
            color: (theme) => theme.palette.grey[500],
          }}
        >
          <CloseIcon />
        </IconButton>
      </DialogTitle>
      <Tabs
        variant="scrollable" scrollButtons={upMd?false:"auto"}
        value={activeMenu}
        onChange={(event: React.SyntheticEvent, newValue: number) => setActiveMenu(newValue)}
        sx={{ borderBottom: 1, borderColor: 'divider'}}
      >
        <Tab label="Upload" />
        <Tab label="Link" />
        <Tab label="Media" />
      </Tabs>
      <DialogContent sx={{ height: "68vh" }}>
        <MyTabPanel index={0} value={activeMenu}>
          <UploadPanel setFinalLink={setFinalLink} storagePath={storagePath} />
        </MyTabPanel>
        <MyTabPanel index={1} value={activeMenu}>
          <LinkPanel setFinalLink={setFinalLink} />
        </MyTabPanel>
        <MyTabPanel index={2} value={activeMenu}>
          <MediaPanel setFinalLink={setFinalLink} storagePath={storagePath} aspectRatio={aspectRatio} handleChangeToUpload={() => setActiveMenu(0)} />
        </MyTabPanel>
      </DialogContent>
    </Dialog>
  )
}

interface IMediaPanelProps {
  storagePath?: string
  aspectRatio?: string
  setFinalLink: React.Dispatch<React.SetStateAction<string | null>>
  handleChangeToUpload: () => void
}
function MediaPanel(props: IMediaPanelProps) {
  const { storagePath = "uploads", aspectRatio = "16/12" } = props;
  const { setFinalLink, handleChangeToUpload } = props;
  const theme = useTheme();
  const upMd = useMediaQuery(theme.breakpoints.up('md'));
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const [confirmDeleteOpen, setConfirmDeleteOpen] = useState<boolean>(false);
  const [nextPageToken, setNextPageToken] = useState<string|undefined>(undefined);
  const [listMedia, setListMedia] = useState<IFStrMListAllResultItem[]>([]);
  const [selectedMedia, setSelectedMedia] = useState<IFStrMListAllResultItem|null>(null);
  // console.log("listMedia", listMedia)
  
  // const fetchData = async (reload: boolean) => {
  //   setIsLoading(true)
  //   await FStrMedia.uploadList(reload?undefined:nextPageToken, { loadMetaData: false, maxResults: 6 })
  //   .then(res => {
  //     // console.log(res)
  //     setNextPageToken(res.nextPageToken)
  //     let newListMedia: IFStrMListAllResultItem[] = [];
  //     if (!reload) newListMedia = [...newListMedia, ...listMedia];
  //     newListMedia = [...newListMedia, ...res.items];
  //     setListMedia(newListMedia);
  //   })
  //   .catch(err => console.error(err))
  //   .finally(() => setIsLoading(false))
  // }

  const fetchData = async (reload: boolean) => {
    setIsLoading(true)
    await FStrMedia.uploadListAll(storagePath, { loadMetaData: false })
    .then(res => {
      // console.log(res)
      setListMedia(res.sort((a, b) => a.strRef.name<b.strRef.name?1:a.strRef.name>b.strRef.name?-1:0));
    })
    .catch(err => console.error(err))
    .finally(() => setIsLoading(false))
  }

  const handleDeleteSelectedMedia = async () => {
    if (!!selectedMedia && selectedMedia !== null) {
      setConfirmDeleteOpen(false)
      setIsLoading(true)
      await FStrMedia.deleteFile(selectedMedia.strRef)
      .then(() => {
        setSelectedMedia(null)
        fetchData(true)
      })
      .catch((err) => {})
      // .finally(() => {setIsLoading(false)})
    }
  }

  useEffect(() => {
    fetchData(false)
  }, [])

  if (isLoading) return (
    <Stack justifyContent="center" alignItems="center" sx={{ width: "100%", height: "100%", pt: 2 }}>
      <CircularProgress />
    </Stack>
  )
  return (
    <Fragment>
      { !listMedia.length ? (
        <Stack spacing={1} justifyContent="center" alignItems="center" sx={{ width: "100%", height: upMd?"50vh":"58vh" }}>
          <Typography>{"Belum ada file yang di-upload"}</Typography>
          <Button variant="contained" onClick={handleChangeToUpload}>
            {"Upload Gambar"}
          </Button>
        </Stack>
      ) : (
        <Box sx={{ position: "relative" }}>
          { !!selectedMedia && selectedMedia !== null ? (
            <Stack
              direction="row" spacing={2} justifyContent="space-between" alignItems="center"
              sx={{ position: "sticky", mb: 2, top: 0, left: 0, right: 0, bgcolor: theme.palette.grey[200], borderRadius: theme.shape.borderRadius, p: 1.5, zIndex: 10 }}
            >
              <Typography variant={upMd?"body1":"body2"}>{selectedMedia.strRef.name}</Typography>
              <Stack direction="row" spacing={0.5} justifyContent="center" alignItems="center">
                <Button
                  variant="contained" color="secondary" size="small"
                  onClick={() => setFinalLink(selectedMedia.downloadUrl)}
                >
                  {"Pilih"}
                </Button>
                <IconButton color="error" onClick={() => setConfirmDeleteOpen(true)}>
                  <DeleteIcon fontSize="inherit" />
                </IconButton>
                <MyConfirmDialog
                  title="Konfirmasi Hapus?" content="Apakah anda yakin untuk menghapus file ini?"
                  open={confirmDeleteOpen} onClose={() => setConfirmDeleteOpen(false)}
                  onAgreeBtnClick={handleDeleteSelectedMedia}
                />
              </Stack>
            </Stack>
          ) : null }
          <Grid container spacing={1.5} sx={{ mb: 2, px: upMd?1:0 }} /*sx={{ pt: !!selectedMedia && selectedMedia ? 7 : 0 }}*/>
            { listMedia?.map((media, index) => {
              const handleClick = () => {
                setSelectedMedia(media)
              }
              const handleDblClick = () => {
                setFinalLink(media.downloadUrl)
              }

              return (
                <Grid key={`finder-dialog-media-item-${index}`} item xs={6} sm={4} md={3}>
                  <Card elevation={2} onDoubleClick={upMd?handleDblClick:undefined} onClick={handleClick}>
                    <CardActionArea sx={{ position: "relative" }}>
                      <CardMedia
                        component="img" loading="lazy"
                        src={media.downloadUrl} title={media.strRef.name} alt={media.strRef.name}
                        sx={{ objectFit: "cover", aspectRatio: aspectRatio }}
                      />
                      <Box padding={0.5} sx={{ position: "absolute", bottom: 0, left: 0, right: 0, bgcolor: "rgba(0, 0, 0, .5)" }}>
                        <Typography variant="caption" color="white">{media.strRef.name}</Typography>
                      </Box>
                    </CardActionArea>
                  </Card>
                </Grid>
              )
            }) }
            {/* { isLoading ? (
              <Grid item xs={12}>
                <Stack justifyContent="center" alignItems="center" sx={{ width: "100%", height: "100%", pt: 2 }}>
                  <CircularProgress />
                </Stack>
              </Grid>
            ) : null } */}
          </Grid>
          { !!nextPageToken ? (
            <Stack direction="row" justifyContent="center" alignItems="center">
              <Button
                variant="outlined" size={upMd?"medium":"small"}
                onClick={() => fetchData(false)}
              >
                {"Muat Selanjutnya"}
              </Button>
            </Stack>
          ) : null }
        </Box>
      ) }
    </Fragment>
  )
}

interface IUploadPanelProps {
  storagePath?: string
  setFinalLink: React.Dispatch<React.SetStateAction<string | null>>
}
function UploadPanel(props: IUploadPanelProps) {
  const { storagePath = "uploads" } = props;
  const { setFinalLink } = props;
  const theme = useTheme();
  const upMd = useMediaQuery(theme.breakpoints.up('md'));
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [fileError, setFileError] = useState<{message: string}|null>(null);

  const handleChangeInput = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const newFile = event.target.files![0];
    if (!!newFile) {
      if (!newFile.type.includes("image")) {
        setFileError({message: "Tipe file salah"})
      }
      else {
        setIsLoading(true)
        setFileError(null)
        await FStrMedia.uploadFile(storagePath, storagePath.toLowerCase().replace("images/", "").replace("/", "-").replace("_", "-"), newFile)
        .then((res) => setFinalLink(res.downloadUrl))
        .catch(err => { console.error(err) })
        .finally(() => setIsLoading(false))
      }
    }
  }
  
  return (
    <Box sx={{ width: "100%", height: upMd?"62vh":"76vh", position: "relative", border: "2px dashed", borderColor: "primary.light", borderRadius: theme.shape.borderRadius }}>
      <Stack spacing={0} justifyContent="center" alignItems="center" sx={{ height: "100%" }}>
        <CloudUploadOutlinedIcon sx={{ width: upMd?200:160, height: upMd?200:160, color: "primary.light" }} />
        <LoadingButton loading={isLoading} component="label" variant="contained" sx={{ zIndex: 10 }}>
          {"Upload"}
          <Box disabled={isLoading} component="input" type="file" accept="image/*" hidden onChange={handleChangeInput} />
        </LoadingButton>
        <Typography color={theme.palette.text.disabled} fontWeight={600} mt={1}>
          {"atau tarik gambar di sini"}
        </Typography>
        { fileError !== null ? (
          <Typography color={"error.main"}>
            {fileError.message}
          </Typography>
        ) : null }
      </Stack>
      <Box disabled={isLoading} component="input" type="file" accept="image/*" onChange={handleChangeInput} sx={{ position: "absolute", top: 0, left: 0, width: "100%", height: "100%", opacity: 0 }} />
    </Box>
  )
}

interface ILinkPanelProps {
  setFinalLink: React.Dispatch<React.SetStateAction<string | null>>
}
function LinkPanel(props: ILinkPanelProps) {
  const { setFinalLink } = props;
  const theme = useTheme();
  const upMd = useMediaQuery(theme.breakpoints.up('md'));
  const [inputLink, setInputLink] = useState<string|null>(null)
  const [isError, setIsError] = useState<boolean>(false)

  const InputLinkProps: TextFieldProps = {
    placeholder: "Tempel URL gambar...", size: "small", variant: "standard",
    helperText: "Hanya gunakan gambar yang memang milik anda (lisensi pribadi).",
    value: inputLink??"", onChange: (event: React.ChangeEvent<HTMLInputElement>) => setInputLink(event.target.value)
  }

  useEffect(() => {
    if (inputLink!==null) {
      let error = false;
      if (inputLink==="") error = true;
      if (inputLink.length <= 0) error = true;
      // if (!inputLink.includes("http://") && !inputLink.includes("https://")) error = true;
      setIsError(error)
    }
  }, [inputLink])

  return (
    <Grid container spacing={2}>
      { upMd ? (
        <Grid item xs={2} />
      ) : null }
      <Grid item xs={12} md={8}>
        <Stack spacing={2}>
          <TextField {...InputLinkProps}/>
          { isError ? (
            <Typography variant="body2" color="error.main">
              {"Url tidak valid. Pastikan dimulai dari http:// atau https://."}
            </Typography>
          ) : (
            <Box
              component="img" src={inputLink??""}
              // sx={{ maxHeight: 300, width: "100%", }}
            />
          ) }
          <Stack direction="row" spacing={2} alignItems="center" justifyContent="end">
            <Button color="error" disabled={isError||inputLink===null} onClick={() => setInputLink(null)}>
              {'Batalkan'}
            </Button>
            <Button disabled={isError||inputLink===null} onClick={() => {setFinalLink(inputLink)}}>
              {'Gunakan Gambar'}
            </Button>
          </Stack>
        </Stack>
      </Grid>
    </Grid>
  )
}